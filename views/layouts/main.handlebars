<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>YourSpaceðŸš€</title>
  <link rel="stylesheet" href="/css/reset.css">
  <link rel="stylesheet" href="/css/style.css">
</head>

<body>
  <div class="flex-column justify-space-around">
    <header class="display-flex justify-space-between align-center p-2">
      <h1>
        <span role="img" aria-label="social">ðŸŒŸ</span>
        <a href="/">YourSpace</a>
      </h1>
      <nav>
        <!-- Conditionally render login or logout links -->
        {{#if logged_in}}
        <a href="/profile">Profile</a> |
        <button class="no-button" id="logout">Logout</button>
        {{else}}
        <a href="/login">Login</a> |
        <a href="/signup">Signup</a>
        {{/if}}
      </nav>
    </header>
    <main class="container container-fluid mt-5">
      <!-- Render the sub layout -->
      {{{ body }}}
    </main>
    <footer class="text-center p-2 mt-4">
      <p>&copy; 2024 YourSpace | Connect. Share. Engage.</p>
    </footer>
  </div>

  <!-- Render script for logged in users only -->
  {{#if logged_in}}
  <script src="/js/logout.js"></script>
  {{/if}}

  

<!-- Add a button to open the chat -->
<button id="open-chat" class="btn btn-primary open-chat-button">Live Chat</button>

<script>
  const socket = io();

  // Elements
  const chatBox = document.querySelector("#chat-box");
  const openChatButton = document.querySelector("#open-chat");
  const toggleButton = document.querySelector("#chat-toggle");
  const form = document.querySelector("#chat-form");
  const input = document.querySelector("#chat-input");
  const messages = document.querySelector("#messages");

  // Open Chat Box
  openChatButton.addEventListener("click", () => {
    chatBox.classList.remove("hidden");
    openChatButton.classList.add("hidden");
  });

  // Close Chat Box
  toggleButton.addEventListener("click", () => {
    chatBox.classList.add("hidden");
    openChatButton.classList.remove("hidden");
  });

  // Handle form submission for sending messages
  form.addEventListener("submit", (e) => {
    e.preventDefault();
    if (input.value.trim() !== "") {
      socket.emit("chat message", input.value);
      input.value = ""; // Clear input after sending
    }
  });

  // Listen for incoming messages
  socket.on("chat message", (msg) => {
    const li = document.createElement("li");
    li.textContent = msg;
    messages.appendChild(li);
    messages.scrollTop = messages.scrollHeight; // Auto-scroll to the bottom
  });
</script>

<script src="/socket.io/socket.io.js"></script>

</body>

</html>